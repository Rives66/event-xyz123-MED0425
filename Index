<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Check-in</title>
<style>
:root { color-scheme: dark; }
body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial; margin:0; background:#0f172a; color:#e5e7eb; }
.wrap { max-width: 960px; margin: 0 auto; padding: 16px; }
.card { background:#111827; border:1px solid #1f2937; border-radius:16px; padding:16px; margin-bottom:16px; }
.row { display:flex; gap:12px; flex-wrap:wrap; align-items:flex-start; }
label { font-size:14px; color:#cbd5e1; display:block; margin-bottom:6px; }
input[type="text"] { width:100%; font-size:18px; padding:12px; border-radius:12px; border:1px solid #334155; background:#0b1220; color:#fff; }
button, select { cursor:pointer; padding:10px 12px; border-radius:12px; border:1px solid #334155; background:#1f2937; color:#fff; }
.status { margin-top:10px; font-weight:700; padding:12px; border-radius:12px; }
.ok { background:#064e3b; color:#c7f9cc; border:1px solid #065f46; }
.warn { background:#6b1110; color:#fecaca; border:1px solid #7f1d1d; }
.err { background:#7f1d1d; color:#fff; border:1px solid #b91c1c; padding:10px; border-radius:10px; margin-bottom:10px; display:none; }
.muted { color:#9ca3af; font-size:12px; }
#reader { width:100%; max-width:360px; }
</style>
</head>
<body>
<div class="wrap">
  <h1>Check-in del Evento</h1>
  <div id="err" class="err"></div>

  <div class="card">
    <div class="row">
      <div style="flex:1; min-width:280px;">
        <label>Validación manual (pegar token):</label>
        <input id="manual" type="text" placeholder="Pega aquí el token leído"/>
        <div class="row" style="margin-top:8px;">
          <button id="btnValidate">Validar</button>
          <button id="btnClear">Limpiar</button>
        </div>
        <div id="result" class="status">Esperando…</div>
      </div>
      <div style="flex:1; min-width:280px;">
        <div class="row" style="align-items:center; margin-bottom:8px;">
          <label for="cameraSelect" style="margin:0;">Cámara:</label>
          <select id="cameraSelect"></select>
          <button id="btnStart">Iniciar cámara</button>
          <button id="btnSwitch">Usar seleccionada</button>
          <button id="btnStop">Detener</button>
        </div>
        <div id="reader"></div>
        <div class="muted">En iPhone primero toca “Iniciar cámara” y aceptá permisos.</div>
      </div>
    </div>
  </div>
</div>

<!-- Librería del lector (CDN) -->
<script src="https://unpkg.com/html5-qrcode"></script>
<script>
const errBox = document.getElementById("err");
function showError(msg){ errBox.textContent = msg; errBox.style.display = "block"; }
function clearError(){ errBox.style.display = "none"; }

const result = document.getElementById("result");
const manual = document.getElementById("manual");
const cameraSelect = document.getElementById("cameraSelect");
let reader;

function setStatus(cls, txt){ result.className = "status " + (cls||""); result.textContent = txt; }

document.getElementById("btnValidate").onclick = () => {
  const token = manual.value.trim();
  if(!token){ setStatus("warn","Token vacío."); return; }
  google.script.run.withSuccessHandler((data)=>{
    if (data.ok && data.status === 'PERMITIDO') {
      setStatus("ok", `Ticket ${data.ticket_id}: válido. ACCESO PERMITIDO.`);
    } else if (data.status === 'YA_USADO') {
      setStatus("warn", `Ticket ${data.ticket_id}: YA USADO. DENEGADO. (${data.usado_en||'—'})`);
    } else if (data.error === 'NO_ENCONTRADO') {
      setStatus("warn", "Token no encontrado. DENEGADO.");
    } else {
      setStatus("warn", "Error de validación.");
    }
  }).withFailureHandler(e=>{
    showError("Error de servidor: " + e);
  }).validate(token, navigator.userAgent || 'mobile');
};

document.getElementById("btnClear").onclick = () => { manual.value=""; setStatus("", "Esperando…"); };

document.getElementById("btnStart").onclick = async () => {
  try {
    clearError();
    if (!window.Html5Qrcode) { showError("Lector no disponible."); return; }
    reader = new Html5Qrcode("reader");
    const cams = await Html5Qrcode.getCameras();
    if(!cams || !cams.length){ showError("No se detectan cámaras."); return; }
    cameraSelect.innerHTML = "";
    cams.forEach((c,i)=>{
      const opt = document.createElement("option");
      opt.value = c.id; opt.textContent = c.label || ("Cámara " + (i+1));
      cameraSelect.appendChild(opt);
    });
    const prefer = cams.find(c => /back|rear|environment/i.test(c.label||""));
    const id = (prefer || cams[0]).id;
    await reader.start(id, { fps:10, qrbox:220 }, (text)=>{ manual.value=text; document.getElementById("btnValidate").click(); }, (err)=>{});
  } catch(e) {
    showError("Error iniciando cámara: " + e);
  }
};

document.getElementById("btnSwitch").onclick = async () => {
  try {
    if(!reader) return showError("Primero iniciá la cámara.");
    const id = cameraSelect.value;
    await reader.stop();
    await reader.start(id, { fps:10, qrbox:220 }, (text)=>{ manual.value=text; document.getElementById("btnValidate").click(); }, (err)=>{});
  } catch(e) {
    showError("No se pudo cambiar de cámara: " + e);
  }
};

document.getElementById("btnStop").onclick = () => { if(reader) reader.stop().catch(()=>{}); };
</script>
</body>
</html>
